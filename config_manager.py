import yaml
from pathlib import Path
from datetime import datetime

class ConfigManager:
    """YAML-based configuration management"""

    def __init__(self):
        self.config_dir = Path.home() / ".cortex"
        self.config_file = self.config_dir / "config.yaml"
        self.workspaces_dir = self.config_dir / "workspaces"
        self.conversations_dir = self.config_dir / "conversations"

        # Create directories if they don't exist
        self.config_dir.mkdir(exist_ok=True)
        self.workspaces_dir.mkdir(exist_ok=True)
        self.conversations_dir.mkdir(exist_ok=True)

        self.config = self.load_config()

    def load_config(self):
        """Load configuration from YAML file"""
        default_config = {
            "window": {"width": 1400, "height": 900, "x": 100, "y": 100},
            "ollama": {
                "url": "http://localhost:11434",
                "timeout": 30,
                "retry_attempts": 3,
                "models": {
                    "chat": "",
                    "search_extract": "",
                    "search_summarize": "",
                    "code_analyze": "",
                    "code_summarize": "",
                    "embedding": "nomic-embed-text",
                },
            },
            "ui": {
                "stream_enabled": True,
                "font_size": 10,
                "theme": "default",
                "show_raw_tab": True,
                "show_debug_tab": True,
                "auto_save_conversations": True,
            },
            "prompts": {
                "chat": "You are a helpful assistant.",
                "search_extract": "Extract relevant information from the following web search results for the query: {query}",
                "search_summarize": "Summarize the following extracted information into a coherent response: {content}",
                "code_analyze": "Analyze the following code and explain its functionality: {code}",
                "code_summarize": "Provide a hierarchical summary of the following codebase: {content}",
            },
            "workspaces": {"current": "default", "list": ["default"]},
            "search": {
                "enabled": False,
                "providers": {"brave": {"enabled": False, "api_key": ""}, "duckduckgo": {"enabled": True}},
                "max_results": 10,
                "timeout": 15,
            },
            "rag": {"chunk_size": 1000, "chunk_overlap": 200, "max_context_length": 4000, "rerank_enabled": True},
        }

        if self.config_file.exists():
            try:
                with open(self.config_file, "r", encoding="utf-8") as f:
                    loaded_config = yaml.safe_load(f) or {}
                return self._deep_merge(default_config, loaded_config)
            except (yaml.YAMLError, IOError) as e:
                print(f"Warning: Could not load config file: {e}")
                return default_config
        else:
            self._create_initial_config()
            return default_config

    def _deep_merge(self, default, loaded):
        """Deep merge two dictionaries"""
        result = default.copy()
        for key, value in loaded.items():
            if key in result and isinstance(result[key], dict) and isinstance(value, dict):
                result[key] = self._deep_merge(result[key], value)
            else:
                result[key] = value
        return result

    def _create_initial_config(self):
        """Create initial config file with helpful comments"""
        yaml_content = """# Cortex RAG Agent Configuration
# This file is automatically generated but can be safely edited

# Window settings
window:
  width: 1400
  height: 900
  x: 100
  y: 100

# Ollama connection settings  
ollama:
  url: http://localhost:11434
  timeout: 30
  retry_attempts: 3
  models:
    chat: ""                    # Main chat model
    search_extract: ""          # Web search information extraction
    search_summarize: ""        # Web search result summarization
    code_analyze: ""            # Code analysis and explanation
    code_summarize: ""          # Codebase hierarchical summarization
    embedding: nomic-embed-text # Embedding model for RAG

# User interface preferences
ui:
  stream_enabled: true
  font_size: 10
  theme: default
  show_raw_tab: true
  show_debug_tab: true
  auto_save_conversations: true

# System prompts for different tasks
prompts:
  chat: "You are a helpful assistant."
  search_extract: "Extract relevant information from the following web search results for the query: {query}"
  search_summarize: "Summarize the following extracted information into a coherent response: {content}"
  code_analyze: "Analyze the following code and explain its functionality: {code}"
  code_summarize: "Provide a hierarchical summary of the following codebase: {content}"

# Workspace management
workspaces:
  current: default
  list:
    - default

# Web search configuration
search:
  enabled: false
  providers:
    brave:
      enabled: false
      api_key: ""  # Get from https://brave.com/search/api/
    duckduckgo:
      enabled: true
  max_results: 10
  timeout: 15

# RAG system settings
rag:
  chunk_size: 1000
  chunk_overlap: 200
  max_context_length: 4000
  rerank_enabled: true
"""
        try:
            with open(self.config_file, "w", encoding="utf-8") as f:
                f.write(yaml_content)
        except IOError as e:
            print(f"Warning: Could not create initial config file: {e}")

    def save_config(self):
        """Save configuration to YAML file"""
        try:
            with open(self.config_file, "w", encoding="utf-8") as f:
                yaml.dump(self.config, f, default_flow_style=False, indent=2, allow_unicode=True, sort_keys=False)
        except IOError as e:
            print(f"Warning: Could not save config file: {e}")

    def get(self, key_path, default=None):
        """Get configuration value using dot notation"""
        keys = key_path.split(".")
        value = self.config

        for key in keys:
            if isinstance(value, dict) and key in value:
                value = value[key]
            else:
                return default

        return value

    def set(self, key_path, value):
        """Set configuration value using dot notation"""
        keys = key_path.split(".")
        config = self.config

        for key in keys[:-1]:
            if key not in config or not isinstance(config[key], dict):
                config[key] = {}
            config = config[key]

        config[keys[-1]] = value

    def save_conversation(self, messages, model_used):
        """Save conversation to file"""
        timestamp = datetime.now().isoformat()
        filename = f"conversation_{timestamp.replace(':', '-')[:19]}.yaml"
        filepath = self.conversations_dir / filename

        conversation_data = {"timestamp": timestamp, "model": model_used, "messages": messages}

        try:
            with open(filepath, "w", encoding="utf-8") as f:
                yaml.dump(conversation_data, f, default_flow_style=False, allow_unicode=True)
            return filepath
        except IOError as e:
            print(f"Warning: Could not save conversation: {e}")
            return None

    def load_conversations(self):
        """Load all conversations"""
        conversations = []
        try:
            for file_path in self.conversations_dir.glob("conversation_*.yaml"):
                with open(file_path, "r", encoding="utf-8") as f:
                    data = yaml.safe_load(f)
                    data["filename"] = file_path.name
                    conversations.append(data)
        except Exception as e:
            print(f"Warning: Could not load conversations: {e}")

        return sorted(conversations, key=lambda x: x["timestamp"], reverse=True)
